name: CI

on:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]
# 코드를 pull하기 위한 읽기 권한 부여
# JaCoCo로 리포트를 생성하기 위한 쓰기 권한 부여
permissions:
  contents: read
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      SPRING_PROFILES_ACTIVE: test
      _JAVA_OPTIONS: "-Djava.net.preferIPv4Stack=true -Djava.net.preferIPv4Addresses"

    services:
      db:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_INITDB_MULTIPLE_DATABASES: "test_main_db,test_meta_db"
          MYSQLD_OPTS: "--bind-address=0.0.0.0"
        options: >-
          --health-cmd "mysql -h 127.0.0.1 -u root -prootpassword -e 'SELECT 1'"
          --health-interval 5s 
          --health-timeout 20s 
          --health-retries 60
        ports:
          - 3306:3306

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # gradle wrapper에 대한 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # gradle 빌드관련 캐시와 빌드 결과물을 초기화
      - name: Clean Gradle Cache and Build
        run: |
          ./gradlew --stop
          rm -rf ~/.gradle/caches/
          rm -rf build/

      # 7.6.4버전으로 gradle 세팅 (JaCoCo와 호환성이 좋은 버전으로 세팅)
      - name: Set up Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: '7.6.4'

      - name: Set Database Connection Environment Variables
        run: |
          echo "DB_HOST=127.0.0.1" >> $GITHUB_ENV
          echo "DB_PASSWORD=rootpassword" >> $GITHUB_ENV

      - name: Wait for MySQL to be ready
        run: |
          echo "Waiting for MySQL service on 127.0.0.1:3306 to be fully ready..."
          max_retries=10
          retry_interval=5
          
          for i in $(seq 1 $max_retries); do
            if nc -z 127.0.0.1 3306; then
              echo "MySQL port 3306 on 127.0.0.1 is open."
              if mysql -h 127.0.0.1 -u root -prootpassword -e 'SELECT 1' &>/dev/null; then
                echo "MySQL service on 127.0.0.1:3306 is ready after $(( (i-1) * retry_interval )) seconds."
                exit 0
              fi
            fi
            echo "Attempt $i/$max_retries: MySQL not ready yet. Retrying in $retry_interval seconds..."
            sleep $retry_interval
          done
          
          echo "Error: MySQL service on 127.0.0.1:3306 did not become ready within $(( max_retries * retry_interval )) seconds."
          
          echo "--- Network Diagnostics ---"
          ping -c 4 127.0.0.1 || true
          netstat -tuln | grep 3306 || true
          cat /etc/hosts || true
          echo "--- End Network Diagnostics ---"
          
          exit 1

      - name: Clean Databases with Flyway
        run: |
          ./gradlew flywayClean -Pflyway.url=jdbc:mysql://127.0.0.1:3306/test_main_db \
                                -Pflyway.user=root \
                                -Pflyway.password=rootpassword \
                                -Pflyway.cleanDisabled=false
          ./gradlew flywayClean -Pflyway.url=jdbc:mysql://127.0.0.1:3306/test_meta_db \
                                -Pflyway.user=root \
                                -Pflyway.password=rootpassword \
                                -Pflyway.cleanDisabled=false
        env:
          DB_HOST: 127.0.0.1
          DB_PASSWORD: rootpassword


      # 테스트 전 애플리케이션 빌드
      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Check application-test.yml exists
        run: cat src/test/resources/application-test.yml || echo "application-test.yml not found"

      # 테스트 진행
      - name: Test with Gradle
        env:
          SPRING_PROFILES_ACTIVE: test
        run: ./gradlew test

      # 테스트를 기반으로 JaCoCo 리포트 작성
      - name: Generate JaCoCo Report
        run: ./gradlew jacocoTestReport

      # JaCoCo리포트를 PR댓글로 남기기
      - name: JaCoCo Report to PR
        uses: madrapps/jacoco-report@v1.7.1
        with:
          paths: ${{ github.workspace }}/build/reports/jacoco/test/jacocoTestReport.xml
          token: ${{ secrets.GITHUB_TOKEN }}
          title: 'Code Coverage'
          update-comment: true